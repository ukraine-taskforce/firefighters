{"ast":null,"code":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport en from \"../../media/translations/en.json\";\nimport uk from \"../../media/translations/uk.json\";\nconst resources = {\n  en: {\n    translation: { ...en\n    }\n  },\n  uk: {\n    translation: { ...uk\n    }\n  }\n};\nconst languagePriority = [\"uk\", \"en\"];\nexport const availableLangs = Object.keys(resources).sort();\n\nfunction getInitLang() {\n  let choice = \"uk\";\n  const prevSession = localStorage.getItem(\"languageSetting\");\n\n  if (prevSession != null && availableLangs.includes(prevSession)) {\n    // use language from previous session\n    choice = prevSession;\n  } else {\n    const browserLangs = navigator.languages.map(lang => lang.split(\"-\")[0].toLowerCase()); // Pick first language from `languagePriority` occurring in browser settings.\n    // This is done because the majority of users is ukrainian and there seem to\n    // be users with their browser settings pointing to en while preferring uk.\n\n    for (let lang of languagePriority) {\n      if (browserLangs.includes(lang)) {\n        choice = lang;\n        break;\n      }\n    }\n  }\n\n  storeLanguage(choice);\n  return choice;\n}\n\nexport function storeLanguage(language) {\n  localStorage.setItem(\"languageSetting\", language);\n}\ni18n.use(initReactI18next) // passes i18n down to react-i18next\n.init({\n  resources,\n  lng: getInitLang(),\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["/home/raveman/ugt/firefighters/src/others/contexts/i18n.tsx"],"names":["i18n","initReactI18next","en","uk","resources","translation","languagePriority","availableLangs","Object","keys","sort","getInitLang","choice","prevSession","localStorage","getItem","includes","browserLangs","navigator","languages","map","lang","split","toLowerCase","storeLanguage","language","setItem","use","init","lng","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAOC,EAAP,MAAe,kCAAf;AACA,OAAOC,EAAP,MAAe,kCAAf;AAEA,MAAMC,SAAS,GAAG;AAChBF,EAAAA,EAAE,EAAE;AAAEG,IAAAA,WAAW,EAAE,EAAE,GAAGH;AAAL;AAAf,GADY;AAEhBC,EAAAA,EAAE,EAAE;AAAEE,IAAAA,WAAW,EAAE,EAAE,GAAGF;AAAL;AAAf;AAFY,CAAlB;AAOA,MAAMG,gBAAiC,GAAG,CAAC,IAAD,EAAO,IAAP,CAA1C;AAEA,OAAO,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYL,SAAZ,EAAuBM,IAAvB,EAAvB;;AAEP,SAASC,WAAT,GAAsC;AACpC,MAAIC,MAAqB,GAAG,IAA5B;AACA,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAApB;;AACA,MAAIF,WAAW,IAAI,IAAf,IAAuBN,cAAc,CAACS,QAAf,CAAwBH,WAAxB,CAA3B,EAAiE;AAC/D;AACAD,IAAAA,MAAM,GAAGC,WAAT;AACD,GAHD,MAGO;AACL,UAAMI,YAAY,GAAGC,SAAS,CAACC,SAAV,CAAoBC,GAApB,CAAyBC,IAAD,IAAUA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBC,WAAnB,EAAlC,CAArB,CADK,CAEL;AACA;AACA;;AACA,SAAK,IAAIF,IAAT,IAAiBf,gBAAjB,EAAmC;AACjC,UAAIW,YAAY,CAACD,QAAb,CAAsBK,IAAtB,CAAJ,EAAiC;AAC/BT,QAAAA,MAAM,GAAGS,IAAT;AACA;AACD;AACF;AACF;;AACDG,EAAAA,aAAa,CAACZ,MAAD,CAAb;AACA,SAAOA,MAAP;AACD;;AAED,OAAO,SAASY,aAAT,CAAuBC,QAAvB,EAAgD;AACrDX,EAAAA,YAAY,CAACY,OAAb,CAAqB,iBAArB,EAAwCD,QAAxC;AACD;AAEDzB,IAAI,CACD2B,GADH,CACO1B,gBADP,EACyB;AADzB,CAEG2B,IAFH,CAEQ;AACJxB,EAAAA,SADI;AAEJyB,EAAAA,GAAG,EAAElB,WAAW,EAFZ;AAGJmB,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACO;;AADP;AAHX,CAFR;AAUA,eAAe/B,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport en from \"../../media/translations/en.json\";\nimport uk from \"../../media/translations/uk.json\";\n\nconst resources = {\n  en: { translation: { ...en } },\n  uk: { translation: { ...uk } },\n};\n\nexport type AvailableLang = \"en\" | \"uk\";\n\nconst languagePriority: AvailableLang[] = [\"uk\", \"en\"];\n\nexport const availableLangs = Object.keys(resources).sort();\n\nfunction getInitLang(): AvailableLang {\n  let choice: AvailableLang = \"uk\";\n  const prevSession = localStorage.getItem(\"languageSetting\");\n  if (prevSession != null && availableLangs.includes(prevSession)) {\n    // use language from previous session\n    choice = prevSession as AvailableLang;\n  } else {\n    const browserLangs = navigator.languages.map((lang) => lang.split(\"-\")[0].toLowerCase());\n    // Pick first language from `languagePriority` occurring in browser settings.\n    // This is done because the majority of users is ukrainian and there seem to\n    // be users with their browser settings pointing to en while preferring uk.\n    for (let lang of languagePriority) {\n      if (browserLangs.includes(lang)) {\n        choice = lang;\n        break;\n      }\n    }\n  }\n  storeLanguage(choice);\n  return choice;\n}\n\nexport function storeLanguage(language: AvailableLang) {\n  localStorage.setItem(\"languageSetting\", language);\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: getInitLang(),\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}